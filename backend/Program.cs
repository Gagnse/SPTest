using backend.Data;
using SpaceLogic.Data.Admin;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// âž• Configuration CORS (autorise React en local et dans Docker)
builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(policy =>
    {
        policy.WithOrigins("http://localhost:5173", "http://localhost:3000") // âœ… Autorise les deux ports
              .AllowAnyHeader()
              .AllowAnyMethod();
    });
});

// âž• Swagger / OpenAPI
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// âž• Enregistre AppDbContext pour la base admin
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddDbContext<AdminDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("AdminConnection")));

// Enregistre les contrÃ´leurs MVC
builder.Services.AddControllers();

var app = builder.Build();

// âž• Forcer le backend Ã  Ã©couter sur le port 5000 (nÃ©cessaire pour Docker)
app.Urls.Add("http://+:5000");

// âž• Middleware CORS
app.UseCors();

// âž• Swagger toujours activÃ© (utile avec Docker)
app.UseSwagger();
app.UseSwaggerUI();

// ðŸ”’ Redirection HTTPS dÃ©sactivÃ©e pour l'instant (Ã  rÃ©activer plus tard)
// app.UseHttpsRedirection();

app.MapGet("/test-admin-db", async (AdminDbContext db) =>
{
    var userCount = await db.Users.CountAsync();
    return Results.Ok($"Il y a {userCount} utilisateur(s) dans la base admin.");
});

// âž• Exemple dâ€™API
var summaries = new[]
{
    "Freezing", "Bracing", "Chilly", "Cool", "Mild",
    "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
};

app.MapGet("/weatherforecast", () =>
{
    var forecast = Enumerable.Range(1, 5).Select(index =>
        new WeatherForecast(
            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
            Random.Shared.Next(-20, 55),
            summaries[Random.Shared.Next(summaries.Length)]
        )
    ).ToArray();
    return forecast;
})
.WithName("GetWeatherForecast")
.WithOpenApi();

// ðŸ”Ž Affiche la chaÃ®ne de connexion en console
Console.WriteLine("Connection string : " + builder.Configuration.GetConnectionString("DefaultConnection"));

// Active les routes des contrÃ´leurs
app.MapControllers();

app.Run();

// âž• ModÃ¨le pour l'exemple d'API
record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)
{
    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
}
